#!/usr/bin/env bash
### end common-components/bash-shebang

# Welcome to the thoughtbot laptop script! Be prepared to turn your laptop (or
# desktop, no haters here) into an awesome development machine.

# This file is auto-generated. Do not edit it by hand unless you know what
# you're doing. Please see 'CONTRIBUTING.md' for more information.
### end common-components/header

trap 'ret=$?; test $ret -ne 0 && printf "failed\n\n" >&2; exit $ret' EXIT

set -e
### end common-components/exit-trap

if [[ ! -d "$HOME/.bin/" ]]; then
    mkdir "$HOME/.bin"
fi

if [ ! -f "$HOME/.profile" ]; then
    touch $HOME/.profile
    printf 'test -f ~/.bashrc && source ~/.bashrc\n' >> ~/.profile
fi

if [ ! -f "$HOME/.bashrc" ]; then
    touch $HOME/.bashrc
fi

if [[ ":$PATH:" != *":$HOME/.bin:"* ]]; then
    printf 'export PATH=$HOME/.bin:$PATH\n' >> ~/.bashrc
    export PATH=$HOME/.bin:$PATH
fi

### end common-components/check-home-bin

fancy_echo() {
  printf "\n%b\n" "$1"
}
### end common-components/shared-functions

if ! command -v brew &>/dev/null; then
    fancy_echo "Installing Homebrew, a good OS X package manager ..."
    ruby <(curl -fsS https://raw.githubusercontent.com/Homebrew/homebrew/go/install)
else
    fancy_echo "Homebrew already installed. Skipping ..."
fi

if ! grep -qs "recommended by brew doctor" ~/.bashrc; then
    fancy_echo "Put Homebrew location earlier in PATH ..."
    printf '\n# recommended by brew doctor\n' >> ~/.bashrc
    printf 'export PATH=/usr/local/bin:$PATH\n\n' >> ~/.bashrc
    export PATH=/usr/local/bin:$PATH
    printf '\n' >> ~/.bashrc
fi

fancy_echo "Updating Homebrew formulas ..."
brew update
### end mac-components/homebrew

#fancy_echo "Installing Postgres, a good open source relational database ..."
#    brew install postgres --no-python
 
#fancy_echo "Installing Redis, a good key-value database ..."
#    brew install redis
 
fancy_echo "Installing The Silver Searcher (better than ack or grep) to search the contents of files ..."
    brew install the_silver_searcher
 
fancy_echo "Installing vim from Homebrew to get the latest version ..."
    brew install vim
 
fancy_echo "Installing ctags, to index files for vim tab completion of methods, classes, variables ..."
    brew install ctags
 
fancy_echo "Installing tmux, to save project state and switch between projects ..."
    brew install tmux
 
fancy_echo "Installing reattach-to-user-namespace, for copy-paste and RubyMotion compatibility with tmux ..."
    brew install reattach-to-user-namespace
 
fancy_echo "Installing ImageMagick, to crop and resize images ..."
    brew install imagemagick
 
fancy_echo "Installing QT, used by Capybara Webkit for headless Javascript integration testing ..."
    brew install qt
 
fancy_echo "Installing watch, to execute a program periodically and show the output ..."
    brew install watch
  
fancy_echo "Installing php55 ..."
    brew tap josegonzalez/homebrew-php
    brew tap homebrew/versions
    brew install php55 php55-xdebug php55-twig php55-pcntl 
### end mac-components/packages

fancy_echo "Installing Composer"

curl -sS https://getcomposer.org/installer | php
mv composer.phar /usr/local/bin/composer

if ! grep -qs "Composer Settings" ~/.bashrc; then
    printf '\n# Composer Settings\n' >> ~/.bashrc
    printf 'export COMPOSER_HOME=/usr/local/composer\n' >> ~/.bashrc
    export COMPOSER_HOME=/usr/local/composer
    printf 'export PATH=/usr/local/composer/vendor/bin:$PATH\n' >> ~/.bashrc
    export PATH=/usr/local/composer/vendor/bin:$PATH
    printf '\n' >> ~/.bashrc
fi


fancy_echo "Installing Drush ..."
composer global require 'drush/drush=dev-master'
fancy_echo "Installing PHPUnit ..."
composer global require 'phpunit/phpunit=4.1.*'
fancy_echo "Installing PHP_Invoker ..."
composer global require 'phpunit/php-invoker=*'
fancy_echo "Installing DbUnit ..."
composer global require 'phpunit/dbunit=1.2'
fancy_echo "Installing PHPUnit_Selenium ..."
composer global require 'phpunit/phpunit-selenium=1.3.*'
### end mac-components/composer

#fancy_echo "Starting Postgres ..."
#  brew services start postgres
### end mac-components/start-services

fancy_echo "Installing rbenv, to change Ruby versions ..."
  brew install rbenv

  if ! grep -qs "rbenv init" ~/.zshrc; then
    printf 'export PATH="$HOME/.rbenv/bin:$PATH"\n' >> ~/.bashrc
    printf 'eval "$(rbenv init - --no-rehash)"\n' >> ~/.bashrc

    fancy_echo "Enable shims and autocompletion ..."
      eval "$(rbenv init -)"
  fi

  export PATH="$HOME/.rbenv/bin:$PATH"

fancy_echo "Installing rbenv-gem-rehash so the shell automatically picks up binaries after installing gems with binaries..."
  brew install rbenv-gem-rehash

fancy_echo "Installing ruby-build, to install Rubies ..."
  brew install ruby-build
### end mac-components/rbenv

fancy_echo "Upgrading and linking OpenSSL ..."
  brew install openssl
  brew link openssl --force
### end mac-components/compiler-and-libraries

ruby_version="$(curl -sSL http://ruby.thoughtbot.com/latest)"

fancy_echo "Installing Ruby $ruby_version ..."
  if [ "$ruby_version" = "2.1.1" ]; then
    curl -fsSL https://gist.github.com/mislav/a18b9d7f0dc5b9efc162.txt | rbenv install --patch 2.1.1
  else
    rbenv install "$ruby_version"
  fi

fancy_echo "Setting $ruby_version as global default Ruby ..."
  rbenv global "$ruby_version"
  rbenv rehash

fancy_echo "Updating to latest Rubygems version ..."
  gem update --system

fancy_echo "Installing Bundler to install project-specific Ruby gems ..."
  gem install bundler --no-document --pre
### end common-components/ruby-environment

fancy_echo "Configuring Bundler for faster, parallel gem installation ..."
  number_of_cores=$(sysctl -n hw.ncpu)
  bundle config --global jobs $((number_of_cores - 1))
### end mac-components/bundler

fancy_echo "Installing Suspenders, thoughtbot's Rails template ..."
  gem install suspenders --no-document
### end common-components/default-gems

fancy_echo "Installing Heroku CLI client ..."
  brew install heroku-toolbelt

fancy_echo "Installing the heroku-config plugin to pull config variables locally to be used as ENV variables ..."
  heroku plugins:install git://github.com/ddollar/heroku-config.git
### end mac-components/heroku

fancy_echo "Installing GitHub CLI client ..."
  brew install hub
### end mac-components/github

if ! command -v rcup &>/dev/null; then
  fancy_echo "Installing rcm, to manage your dotfiles ..."
    brew tap thoughtbot/formulae
    brew install rcm
else
  fancy_echo "rcm already installed. Skipping ..."
fi
### end mac-components/rcm

fancy_echo "Installing your personal additions from ~/.laptop.local ..."
  if [[ -f ~/.laptop.local ]]; then
    source ~/.laptop.local
  fi
### end common-components/personal-additions

